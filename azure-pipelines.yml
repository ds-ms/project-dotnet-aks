# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'b90bd896-0e61-4526-9ba0-8c9f1a17de4c'
  imageRepository: 'dsmsprojectdotnetaks'
  containerRegistry: 'desattir.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'desattir1888233d-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  
  k8sNamespaceForPR: '$(system.pullRequest.sourceBranch)'

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          
    - upload: charts
      artifact: charts

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  jobs:
  - deployment: Deploy
    condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'dsmsprojectdotnetaks-3130.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
          
          - task: AzureCLI@2
            displayName: get host suffix
            inputs:
              scriptType: pscore
              scriptLocation: inlineScript
              azureSubscription: RMDev
              inlineScript: |
                 $out=$(az aks list --query "[?name == 'desattiraks'][resourceGroup]" | ConvertFrom-Json)
                 if ($out.Length -eq 0) { 
                    Write-Host "Ensure your AKS cluster still exists";
                    exit 1;
                 }
                 if ($out.Length -gt 1) { 
                    Write-Host "There's a conflict, add --resource-group flag to the list command";
                    exit 1;
                 }
                 if ($out[0][0]) {
                    $resourceGroupName=$out[0][0]
                    az aks use-dev-spaces -n desattiraks -g $resourceGroupName -s default -y
                    $hostSuffix=$(azds show-context -o json | ConvertFrom-Json).controller.hostSuffix
                    Write-Host "##vso[task.setvariable variable=HostSuffix]${hostSuffix}"
                 }
                 else {
                    Write-Host "Enable dev spaces";
                    exit 1;
                 }

          - task: KubernetesManifest@0
            displayName: Bake manifests
            name: bake
            inputs:
              action: bake
              helmChart: $(Pipeline.Workspace)/charts/samplechart
              overrideFiles: $(Pipeline.Workspace)/charts/samplechart/values.yaml
              overrides: |
                image.repository:$(containerRegistry)/$(imageRepository)
                service.port:80
                ingress.enabled:true
                ingress.annotations.kuberentes\.io/ingress\.class:addon-http-application-routing
                ingress.hostname:dev.appdeploy.$(HostSuffix)

          - script: cat $(bake.manifestsBundle)
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(bake.manifestsBundle)
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

  - deployment: DeployPR
    displayName: Deploy PR
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/pull/'))
    pool:
      vmImage: $(vmImageName)
      
    environment: 'dsmsprojectdotnetaks-3130.$(k8sNamespaceForPR)'
    strategy:
      runOnce:
        deploy:
          steps:
          - reviewApp: default

          - task: Kubernetes@1
            displayName: 'kubectl create namespace'
            inputs:
              command: apply
              useConfigurationFile: true
              inline: '{ "kind": "Namespace", "apiVersion": "v1", "metadata": { "name": "$(k8sNamespaceForPR)" }}'

          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              namespace: $(k8sNamespaceForPR)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: AzureCLI@2
            displayName: get host suffix
            inputs:
              scriptType: pscore
              scriptLocation: inlineScript
              azureSubscription: RMDev
              inlineScript: |
                 $out=$(az aks list --query "[?name == 'desattiraks'][resourceGroup]" | ConvertFrom-Json)
                 if ($out.Length -eq 0) { 
                    Write-Host "Ensure your AKS cluster still exists";
                    exit 1;
                 }
                 if ($out.Length -gt 1) { 
                    Write-Host "There's a conflict, add --resource-group flag to the list command";
                    exit 1;
                 }
                 if ($out[0][0]) {
                    $resourceGroupName=$out[0][0]
                    az aks use-dev-spaces -n desattiraks -g $resourceGroupName -s $(k8sNamespaceForPR) -y
                    $hostSuffix=$(azds show-context -o json | ConvertFrom-Json).controller.hostSuffix
                    Write-Host "##vso[task.setvariable variable=HostSuffix]${hostSuffix}"
                 }
                 else {
                    Write-Host "Enable dev spaces";
                    exit 1;
                 }

          - task: KubernetesManifest@0
            displayName: Bake manifests
            name: bake
            inputs:
              action: bake
              releaseName: pr
              helmChart: $(Pipeline.Workspace)/charts/samplechart
              overrideFiles: $(Pipeline.Workspace)/charts/samplechart/values.yaml
              overrides: |
                image.repository:$(containerRegistry)/$(imageRepository)
                service.port:80
                ingress.enabled:true
                ingress.annotations.kuberentes\.io/ingress\.class:traefik-azds
                ingress.paths[0]:/
                ingress.hosts[0]:appdeploy.s.$(HostSuffix)

          - script: cat $(bake.manifestsBundle)
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(bake.manifestsBundle)
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

          - task: Kubernetes@1
            name: get
            displayName: 'kubectl get services'
            inputs:
              command: get
              namespace: $(k8sNamespaceForPR)
              arguments: svc
          
          - powershell: |
              $service=$(echo '$(get.KubectlOutput)' |  Out-String | ConvertFrom-Json).items[0]
              $ip=$service.status.loadBalancer.ingress.ip
              $port=$service.spec.ports.port
              $message="Deployment to your review-app succeeded."
              if($ip) {$message="${message}<br><br>You can navigate to http://${ip}:${port} to test your changes"}
              echo "##vso[task.setvariable variable=GITHUB_COMMENT]${message}"

